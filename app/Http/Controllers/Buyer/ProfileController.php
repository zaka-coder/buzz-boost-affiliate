<?php

namespace App\Http\Controllers\Buyer;

use App\Http\Controllers\Controller;
use App\Models\BuyerCard;
use App\Models\BuyerProfile;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Stripe\Exception\CardException;
use Stripe\StripeClient;

class ProfileController extends Controller
{
    public function index()
    {
        return view('buyer.profile.index');
    }

    public function create()
    {
        return view('buyer.profile.create');
    }

    public function store(Request $request)
    {
        $user = Auth::user();
        
        $request->validate([
            // 'phone' => 'required',
            'country' => 'required',
            'city' => 'required',
            'state' => 'required',
            'zip' => 'required',
            'address' => 'required',
            'payment_method_id' => 'required|string', // Payment method ID generated by Stripe Elements
            'cardNumber' => 'required',
            'expiryMonth' => 'required',
            'expiryYear' => 'required',
        ]);

        // dd($request->all());

        try {
            $stripe = new StripeClient(env('STRIPE_SECRET'));

            // Create a Stripe customer
            $customer =  $stripe->customers->create([
                'name' => $user->name,
                'email' => $user->email,
                'payment_method' => $request->payment_method_id,
                'invoice_settings' => [
                    'default_payment_method' => $request->payment_method_id,
                ],
            ]);

            $response = $stripe->paymentIntents->create([
                'payment_method_types' => ['card'],
                'amount' => 100,
                'currency' => 'usd',
                'customer' => $customer->id,
                'payment_method' => $request->payment_method_id,
                'setup_future_usage' => 'off_session',
                'description' => 'Payment for card verification',
                'confirm' => true,
                // 'automatic_payment_methods' => [
                //     'enabled' => true,
                //     'allow_redirects' => 'never',
                // ],
            ]);

            // dd($response);
            if ($response->status == 'succeeded') {
                // store buyer profile
                $profile = BuyerProfile::create([
                    'user_id' => $user->id,
                    // 'phone' => $request->phone,
                    'country' => $request->country,
                    'city' => $request->city,
                    'state' => $request->state,
                    'zip' => $request->zip,
                    'address' => $request->address,
                ]);

                // check for image
                if ($request->hasFile('image')) {
                    // validate image
                    $request->validate([
                        'image' => 'image|mimes:jpeg,png,jpg|max:2048',
                    ]);
                    $image = $request->file('image');
                    // store image
                    $name_gen = uniqid();
                    $img_ext = strtolower($image->getClientOriginalExtension());
                    $filename =  $name_gen . '-' . time() . '.' . $img_ext;
                    $folderPath = 'images/profile/';
                    $image_url = $folderPath .  $filename;
                    $image->move($folderPath, $filename); // saving image to public folder
                    // store image url in database
                    $profile->image = $image_url;
                    $profile->save();
                }

                // store card details
                BuyerCard::create([
                    'user_id' => $user->id,
                    'name' => $user->name,
                    'card_number' => $request->cardNumber,
                    'cvc' => 'dummy cvc',
                    'expiry_month' => $request->expiryMonth,
                    'expiry_year' => $request->expiryYear,
                    'is_verified' => 1,
                    'default' => 1,
                    'stripe_customer_id' => encrypt($customer->id),
                ]);

                if ($profile) {
                    return redirect()->route('dashboard')->withSuccess('Your profile has been created successfully');
                } else {
                    return redirect()->back()->with('error', 'Something went wrong, please try again');
                }
            } else {
                throw new Exception("There was a problem processing your payment", 1);
            }
        } catch (CardException $th) {
            throw new Exception("There was a problem processing your payment", 1);
        }
    }

    // public function store(Request $request)
    // {
    //     $request->validate([
    //         // 'phone' => 'required',
    //         'country' => 'required',
    //         'city' => 'required',
    //         'state' => 'required',
    //         'zip' => 'required',
    //         'address' => 'required',
    //         'name' => 'required',
    //         'card_number' => 'required|numeric|min:13|max:19',
    //         'cvc' => 'required|numeric|min:3|max:4',
    //         'expiry_date' => 'required',
    //     ]);

    //     try {

    //         // store buyer profile
    //         $profile = BuyerProfile::create([
    //             'user_id' => auth()->user()->id,
    //             // 'phone' => $request->phone,
    //             'country' => $request->country,
    //             'city' => $request->city,
    //             'state' => $request->state,
    //             'zip' => $request->zip,
    //             'address' => $request->address,
    //         ]);

    //         // check for image
    //         if ($request->hasFile('image')) {
    //             // validate image
    //             $request->validate([
    //                 'image' => 'image|mimes:jpeg,png,jpg|max:2048',
    //             ]);
    //             $image = $request->file('image');
    //             // store image
    //             $name_gen = uniqid();
    //             $img_ext = strtolower($image->getClientOriginalExtension());
    //             $filename =  $name_gen . '-' . time() . '.' . $img_ext;
    //             $folderPath = 'images/profile/';
    //             $image_url = $folderPath .  $filename;
    //             $image->move($folderPath, $filename); // saving image to public folder
    //             // store image url in database
    //             $profile->image = $image_url;
    //             $profile->save();
    //         }



    //         // extract month from expiry date
    //         $expiry_month = Carbon::parse($request->expiry_date)->format('m');
    //         // extract year from expiry date
    //         $expiry_year = Carbon::parse($request->expiry_date)->format('Y');

    //         // store card details
    //         BuyerCard::create([
    //             'user_id' => auth()->user()->id,
    //             'name' => encrypt($request->name),
    //             'card_number' => encrypt($request->card_number),
    //             'cvc' => encrypt($request->cvc),
    //             'expiry_month' => encrypt($expiry_month),
    //             'expiry_year' => encrypt($expiry_year),
    //         ]);

    //         return redirect()->route('dashboard')->with('success', 'Profile created successfully');
    //     } catch (\Throwable $th) {
    //         return redirect()->back()->with('error', $th->getMessage());
    //     }
    // }
}
