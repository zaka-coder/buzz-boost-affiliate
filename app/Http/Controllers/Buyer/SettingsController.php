<?php

namespace App\Http\Controllers\Buyer;

use App\Http\Controllers\Controller;
use App\Models\BuyerCard;
use App\Models\BuyerProfile;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Stripe\Exception\CardException;
use Stripe\StripeClient;

class SettingsController extends Controller
{
    public function index()
    {
        $user = auth()->user();
        return view('buyer.settings.index', compact('user'));
    }

    public function updateProfile(Request $request)
    {
        $request->validate([
            'name' => 'required',
            'email' => 'required|email:unique:users,email,' . $request->user()->id,
            'phone' => 'required'
        ]);

        $user = $request->user();

        $user->update([
            'name' => $request->name,
            'email' => $request->email,
        ]);

        $user->profile()->update([
            'phone' => $request->phone
        ]);

        return redirect()->back()->with('success', 'Profile updated successfully');
    }

    public function shippingAddress()
    {
        $user = auth()->user();
        return view('buyer.settings.shipping', compact('user'));
    }

    public function updateShippingAddress(Request $request)
    {
        // dd($request->all());
        $request->validate([
            'address' => 'required',
            'city' => 'required',
            'state' => 'required',
            'country' => 'required',
            'zip' => 'required',
        ]);

        $user = $request->user();

        BuyerProfile::updateOrCreate([
            'user_id' => $user->id
        ], [
            'address' => $request->address,
            'city' => $request->city,
            'state' => $request->state,
            'country' => $request->country,
            'zip' => $request->zip
        ]);

        return redirect()->back()->with('success', 'Shipping address updated successfully');
    }


    public function creditCard()
    {
        $user = auth()->user();

        // check if buyer has card
        // if ($user->credit_cards->count() > 0) {
        //     foreach($user->credit_cards as $card) {
        //         $card->name = decrypt($card->name);
        //         $card->card_number = decrypt($card->card_number);
        //         $card->card_number = substr($card->card_number, -4); // take last 4 digits of card number
        //         $card->expiry_date = decrypt($card->expiry_month) . '/' . decrypt($card->expiry_year);
        //     }
        // }

        return view('buyer.settings.credit-card', compact('user'));
    }

    public function storeCreditCard(Request $request)
    {
        $user = Auth::user();
        // dd($request->all());
        $request->validate([
            'payment_method_id' => 'required|string', // Payment method ID generated by Stripe Elements
            'cardNumber' => 'required',
            'expiryMonth' => 'required',
            'expiryYear' => 'required',
        ]);

        $default = 1;
        // check if buyer has a default card
        if ($user->credit_cards->count() > 0) {
            foreach($user->credit_cards as $card) {
                if ($card->default == 1) {
                    $default = 0;
                }
            }
        }

        // try {
            $stripe = new StripeClient(env('STRIPE_SECRET'));

            // Create a Stripe customer
            $customer =  $stripe->customers->create([
                'name' => $user->name,
                'email' => $user->email,
                'payment_method' => $request->payment_method_id,
            ]);

            $response = $stripe->paymentIntents->create([
                'payment_method_types' => ['card'],
                'amount' => 100,
                'currency' => 'usd',
                'customer' => $customer->id,
                'payment_method' => $request->payment_method_id,
                'setup_future_usage' => 'off_session',
                'description' => 'Payment for card verification',
                'confirm' => true,
            ]);

            // dd($response);
            if ($response->status == 'succeeded') {
                // store card details
                $card = BuyerCard::create([
                    'user_id' => $user->id,
                    'name' => $user->name,
                    'card_number' => $request->cardNumber,
                    'cvc' => 'dummy cvc',
                    'expiry_month' => $request->expiryMonth,
                    'expiry_year' => $request->expiryYear,
                    'is_verified' => 1,
                    'default' => $default,
                    'stripe_customer_id' => encrypt($customer->id),
                ]);

                if ($card) {
                    return redirect()->back()->with('success', 'New credit card added successfully');
                } else {
                    return redirect()->back()->with('error', 'Something went wrong, please try again');
                }
            } else {
                throw new Exception("There was a problem in verifying your card", 1);
            }
        // } catch (CardException $th) {
        //     throw new Exception("There was a problem in verifying your card", 1);
        // }
    }
    // public function storeCreditCard(Request $request)
    // {
    //     $request->validate([
    //         'name' => 'required',
    //         'card_number' => 'required|numeric|min:13|max:19',
    //         'cvc' => 'required|numeric|min:3|max:4',
    //         // 'expiry_month' => 'required|numeric|min:1|max:12',
    //         // 'expiry_year' => 'required|numeric|min:' . now()->year . '|max:' . (now()->year + 10),
    //         'expiry_date' => 'required',
    //     ]);

    //     // extract month from expiry date
    //     $expiry_month = Carbon::parse($request->expiry_date)->format('m');
    //     // extract year from expiry date
    //     $expiry_year = Carbon::parse($request->expiry_date)->format('Y');

    //     $user = $request->user();

    //     $default = 1;

    //     // check if buyer has a default card
    //     if ($user->credit_cards->count() > 0) {
    //         foreach($user->credit_cards as $card) {
    //             if ($card->default == 1) {
    //                 $default = 0;
    //             }
    //         }
    //     }


    //     // create or update buyer card
    //     BuyerCard::create(
    //         [
    //             'user_id' => $user->id,
    //             'name' => encrypt($request->name),
    //             'card_number' => encrypt($request->card_number),
    //             'cvc' => encrypt($request->cvc),
    //             'expiry_month' => encrypt($expiry_month),
    //             'expiry_year' => encrypt($expiry_year),
    //             'default' => $default,
    //         ]
    //     );

    //     return redirect()->back()->with('success', 'New credit card added successfully');
    // }

    public function deleteCreditCard(Request $request)
    {
        $request->validate([
            'card_id' => 'required|exists:buyer_cards,id',
        ]);

        $card = BuyerCard::findOrFail($request->card_id);

        // check if card is default
        if ($card->default == 1) {
            // Make another card default
            $user = auth()->user();
            // check if buyer has card make the first card default
            if ($user->credit_cards->count() > 0) {
                // get first card which is not default
                foreach($user->credit_cards as $card) {
                    if ($card->default == 0) {
                        $card->default = 1;
                        $card->save();
                        break;
                    }
                }

            }

        }

        $card->delete();

        return redirect()->back()->with('success', 'Credit card deleted successfully');
    }

    public function setDefaultCreditCard($id)
    {
        $card = BuyerCard::findOrFail($id);

        // reset previous default
        $user = auth()->user();
        $user->credit_cards()->update([
            'default' => 0
        ]);

        // set new default
        $card->default = 1;
        $card->save();

        return redirect()->back()->with('success', 'Credit card set as default successfully');
    }


}
